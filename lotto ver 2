{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyObh+qG2gblz29f9BOxFF0v"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Ingest Data"],"metadata":{"id":"JMhDOcDCBZeN"}},{"cell_type":"code","source":["!pip install tqdm\n","!pip install pandas\n","!pip install CPT"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D9zxgaclQq2D","executionInfo":{"status":"ok","timestamp":1735221934266,"user_tz":300,"elapsed":10552,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"a68b62fa-cbb2-45a6-be1a-65c971508f73"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (4.67.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n","Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: CPT in /usr/local/lib/python3.10/dist-packages (1.3.4)\n"]}]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":348},"id":"69u-csRgBXAN","executionInfo":{"status":"ok","timestamp":1735221589184,"user_tz":300,"elapsed":623,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"93daa983-3841-40e4-9836-a8256791bd06"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     PRODUCT  DRAW NUMBER  SEQUENCE NUMBER   DRAW DATE  NUMBER DRAWN 1  \\\n","0  LOTTO MAX            1                0   9/25/2009               5   \n","1  LOTTO MAX            2                0   10/2/2009               8   \n","2  LOTTO MAX            3                0   10/9/2009               5   \n","3  LOTTO MAX            4                0  10/16/2009               4   \n","4  LOTTO MAX            5                0  10/23/2009               4   \n","\n","   NUMBER DRAWN 2  NUMBER DRAWN 3  NUMBER DRAWN 4  NUMBER DRAWN 5  \\\n","0              17              19              25              31   \n","1              27              28              29              31   \n","2              15              25              38              42   \n","3              10              18              20              31   \n","4               7              10              12              23   \n","\n","   NUMBER DRAWN 6  NUMBER DRAWN 7  BONUS NUMBER  \n","0              38              46             4  \n","1              32              35            11  \n","2              46              47            26  \n","3              35              44            29  \n","4              25              36            18  "],"text/html":["\n","  <div id=\"df-72842ad3-359f-4434-b7c5-558cd6881f95\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PRODUCT</th>\n","      <th>DRAW NUMBER</th>\n","      <th>SEQUENCE NUMBER</th>\n","      <th>DRAW DATE</th>\n","      <th>NUMBER DRAWN 1</th>\n","      <th>NUMBER DRAWN 2</th>\n","      <th>NUMBER DRAWN 3</th>\n","      <th>NUMBER DRAWN 4</th>\n","      <th>NUMBER DRAWN 5</th>\n","      <th>NUMBER DRAWN 6</th>\n","      <th>NUMBER DRAWN 7</th>\n","      <th>BONUS NUMBER</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LOTTO MAX</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>9/25/2009</td>\n","      <td>5</td>\n","      <td>17</td>\n","      <td>19</td>\n","      <td>25</td>\n","      <td>31</td>\n","      <td>38</td>\n","      <td>46</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>LOTTO MAX</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>10/2/2009</td>\n","      <td>8</td>\n","      <td>27</td>\n","      <td>28</td>\n","      <td>29</td>\n","      <td>31</td>\n","      <td>32</td>\n","      <td>35</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>LOTTO MAX</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>10/9/2009</td>\n","      <td>5</td>\n","      <td>15</td>\n","      <td>25</td>\n","      <td>38</td>\n","      <td>42</td>\n","      <td>46</td>\n","      <td>47</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>LOTTO MAX</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>10/16/2009</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>18</td>\n","      <td>20</td>\n","      <td>31</td>\n","      <td>35</td>\n","      <td>44</td>\n","      <td>29</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>LOTTO MAX</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>10/23/2009</td>\n","      <td>4</td>\n","      <td>7</td>\n","      <td>10</td>\n","      <td>12</td>\n","      <td>23</td>\n","      <td>25</td>\n","      <td>36</td>\n","      <td>18</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-72842ad3-359f-4434-b7c5-558cd6881f95')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-72842ad3-359f-4434-b7c5-558cd6881f95 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-72842ad3-359f-4434-b7c5-558cd6881f95');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c6de2747-f0c1-4b89-9e80-fb7704b8b53d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c6de2747-f0c1-4b89-9e80-fb7704b8b53d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c6de2747-f0c1-4b89-9e80-fb7704b8b53d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 2750,\n  \"fields\": [\n    {\n      \"column\": \"PRODUCT\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"LOTTO MAX\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DRAW NUMBER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 132,\n        \"min\": 1,\n        \"max\": 455,\n        \"num_unique_values\": 455,\n        \"samples\": [\n          303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SEQUENCE NUMBER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 0,\n        \"max\": 52,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          19\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DRAW DATE\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 455,\n        \"samples\": [\n          \"7/10/2015\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NUMBER DRAWN 1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 33,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NUMBER DRAWN 2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 2,\n        \"max\": 40,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NUMBER DRAWN 3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 3,\n        \"max\": 42,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NUMBER DRAWN 4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 5,\n        \"max\": 46,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NUMBER DRAWN 5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 8,\n        \"max\": 47,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NUMBER DRAWN 6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 12,\n        \"max\": 48,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NUMBER DRAWN 7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 15,\n        \"max\": 49,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BONUS NUMBER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 0,\n        \"max\": 49,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":48}],"source":["#view the data, get table of findings\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from tqdm import tqdm\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","from math import sqrt\n","from sklearn.metrics import r2_score\n","df = pd.read_csv(\"/content/LOTTOMAX.csv\")\n","df.head()"]},{"cell_type":"markdown","source":["#Get frequency of each draw number\n"],"metadata":{"id":"NXycF7_mGFEG"}},{"cell_type":"code","source":["#calculate most common draws per sequence number\n","first = df[\"NUMBER DRAWN 1\"]\n","first_freq = first.value_counts()\n","second = df[\"NUMBER DRAWN 2\"]\n","second_freq = second.value_counts()\n","third = df[\"NUMBER DRAWN 3\"]\n","third_freq = third.value_counts()\n","fourth = df[\"NUMBER DRAWN 4\"]\n","fourth_freq = fourth.value_counts()\n","fifth = df[\"NUMBER DRAWN 5\"]\n","fifth_freq = fifth.value_counts()\n","sixth = df[\"NUMBER DRAWN 6\"]\n","sixth_freq = sixth.value_counts()\n","seventh = df[\"NUMBER DRAWN 7\"]\n","seventh_freq = seventh.value_counts()\n","bonus = df[\"BONUS NUMBER\"]\n","bonus_freq = bonus.value_counts()\n","print(first_freq)\n","print(second_freq)\n","print(third_freq)\n","print(fourth_freq)\n","print(fifth_freq)\n","print(sixth_freq)\n","print(seventh_freq)\n","print(bonus_freq)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ujzUXa6QCQ_4","executionInfo":{"status":"ok","timestamp":1735218460320,"user_tz":300,"elapsed":189,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"dbf4c62d-61bf-4c04-8f50-c005477e6716"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["NUMBER DRAWN 1\n","1     370\n","2     360\n","3     318\n","4     264\n","5     227\n","7     200\n","6     187\n","8     140\n","9     131\n","10     94\n","12     90\n","11     82\n","13     59\n","14     48\n","15     45\n","16     26\n","17     25\n","19     21\n","18     17\n","20     13\n","21     10\n","23      6\n","22      5\n","24      4\n","26      4\n","25      2\n","27      1\n","33      1\n","Name: count, dtype: int64\n","NUMBER DRAWN 2\n","8     193\n","12    179\n","9     170\n","10    167\n","6     158\n","11    153\n","7     152\n","14    138\n","5     132\n","13    128\n","16    125\n","15    118\n","4     107\n","17    103\n","3      99\n","18     96\n","19     82\n","20     61\n","22     57\n","21     56\n","2      55\n","23     49\n","24     41\n","25     30\n","26     21\n","27     20\n","28     17\n","29     11\n","30      9\n","31      7\n","33      4\n","34      4\n","37      3\n","32      2\n","35      2\n","40      1\n","Name: count, dtype: int64\n","NUMBER DRAWN 3\n","15    152\n","17    149\n","13    148\n","20    141\n","18    138\n","11    136\n","19    128\n","16    126\n","14    125\n","22    116\n","24    113\n","21    112\n","12    103\n","25     94\n","10     92\n","23     84\n","27     77\n","26     77\n","9      74\n","8      72\n","28     70\n","29     52\n","7      51\n","30     51\n","6      43\n","31     40\n","32     33\n","33     26\n","5      24\n","35     19\n","4      17\n","37     17\n","34     16\n","36     12\n","38      9\n","3       6\n","40      3\n","39      2\n","41      1\n","42      1\n","Name: count, dtype: int64\n","NUMBER DRAWN 4\n","20    138\n","24    138\n","28    134\n","25    128\n","22    125\n","21    123\n","27    118\n","29    113\n","18    111\n","26    110\n","23    110\n","30    108\n","19    108\n","32     99\n","17     97\n","31     97\n","16     95\n","33     82\n","15     77\n","35     75\n","34     72\n","14     65\n","36     54\n","38     52\n","13     51\n","37     42\n","12     37\n","39     33\n","11     30\n","10     27\n","40     20\n","41     16\n","9      15\n","42     12\n","8      11\n","7       9\n","43      5\n","6       4\n","44      4\n","5       2\n","45      2\n","46      1\n","Name: count, dtype: int64\n","NUMBER DRAWN 5\n","35    149\n","32    142\n","34    138\n","37    132\n","39    130\n","33    129\n","30    121\n","31    119\n","36    115\n","29    113\n","28    110\n","27    110\n","26    109\n","24    104\n","38     98\n","25     95\n","41     85\n","23     80\n","40     79\n","22     76\n","42     70\n","21     58\n","43     58\n","19     49\n","20     45\n","18     41\n","17     36\n","44     31\n","16     27\n","45     27\n","15     16\n","14     16\n","46     14\n","13      7\n","12      6\n","11      4\n","47      4\n","10      3\n","8       3\n","9       1\n","Name: count, dtype: int64\n","NUMBER DRAWN 6\n","42    175\n","39    170\n","44    167\n","40    160\n","41    160\n","43    159\n","38    148\n","45    137\n","36    136\n","35    135\n","37    133\n","34    105\n","33    102\n","46     94\n","32     90\n","47     87\n","31     80\n","30     76\n","29     66\n","48     59\n","28     52\n","27     48\n","26     42\n","25     36\n","24     31\n","23     27\n","20     17\n","22     16\n","21     14\n","19      7\n","18      6\n","17      5\n","16      5\n","15      2\n","12      2\n","14      1\n","Name: count, dtype: int64\n","NUMBER DRAWN 7\n","49    384\n","48    341\n","47    315\n","46    258\n","45    227\n","44    193\n","43    170\n","42    141\n","41    133\n","40     92\n","39     80\n","38     76\n","37     62\n","35     46\n","36     45\n","34     36\n","33     35\n","31     30\n","32     17\n","29     16\n","30     13\n","27      9\n","28      8\n","25      6\n","24      4\n","19      3\n","23      3\n","26      3\n","22      2\n","18      1\n","15      1\n","Name: count, dtype: int64\n","BONUS NUMBER\n","0     2295\n","46      19\n","1       16\n","18      15\n","38      14\n","17      14\n","26      13\n","45      13\n","33      12\n","44      12\n","12      12\n","40      12\n","37      12\n","39      11\n","10      11\n","49      11\n","27      11\n","7       11\n","32      10\n","47      10\n","28       9\n","14       9\n","6        9\n","21       9\n","48       9\n","15       9\n","42       9\n","36       9\n","11       8\n","22       8\n","31       8\n","24       8\n","9        8\n","25       8\n","8        8\n","20       7\n","5        7\n","30       7\n","4        7\n","3        7\n","19       7\n","43       6\n","23       6\n","16       6\n","13       6\n","29       5\n","34       5\n","35       4\n","41       4\n","2        4\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","source":["#display frequency charts for each number"],"metadata":{"id":"vixba6grE4jT"}},{"cell_type":"markdown","source":["### First"],"metadata":{"id":"8N2Jc07OGP9a"}},{"cell_type":"code","source":["plt.figure(figsize=(15,6))\n","plt.bar(first_freq.index, first_freq.values, tick_label = first_freq.index)\n","plt.title(\"Frequency of First Number\")\n","plt.xlabel(\"Number Drawn\")\n","plt.ylabel(\"Frequency\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":672},"id":"hSqH55LuE3_7","executionInfo":{"status":"ok","timestamp":1735219010305,"user_tz":300,"elapsed":765,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"91653e60-3058-4903-a893-8b069bcfc2f3"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":25},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###Second"],"metadata":{"id":"WFNl02O1GTEx"}},{"cell_type":"code","source":["plt.figure(figsize=(15,6))\n","plt.bar(second_freq.index, second_freq.values, tick_label = second_freq.index)\n","plt.title(\"Frequency of Second Number\")\n","plt.xlabel(\"Number Drawn\")\n","plt.ylabel(\"Frequency\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":672},"id":"hvcL8bznGVCx","executionInfo":{"status":"ok","timestamp":1735219001313,"user_tz":300,"elapsed":949,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"1a3748e6-6e09-4e13-9ee4-0864710c7f22"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":24},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Third"],"metadata":{"id":"IE6IEin_GiQY"}},{"cell_type":"code","source":["plt.figure(figsize=(15,6))\n","plt.bar(third_freq.index, third_freq.values, tick_label = third_freq.index)\n","plt.title(\"Frequency of Third Number\")\n","plt.xlabel(\"Number Drawn\")\n","plt.ylabel(\"Frequency\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":672},"id":"oCmE3nr5Gkjq","executionInfo":{"status":"ok","timestamp":1735218994526,"user_tz":300,"elapsed":996,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"8b1e39b3-0137-4bf9-96c4-ded3d8177464"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":23},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### Fourth"],"metadata":{"id":"Rck-0_hlGuMc"}},{"cell_type":"code","source":["plt.figure(figsize=(14,7))\n","plt.bar(fourth_freq.index, fourth_freq.values, tick_label = fourth_freq.index)\n","plt.title(\"Frequency of Fourth Number\")\n","plt.xlabel(\"Number Drawn\")\n","plt.ylabel(\"Frequency\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":778},"id":"RLr3MkSLGwOJ","executionInfo":{"status":"ok","timestamp":1735218983164,"user_tz":300,"elapsed":1039,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"32fcd95c-07c2-46de-e3d6-d8eb338653ae"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":22},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Fifth"],"metadata":{"id":"yeiiXzK4HPp7"}},{"cell_type":"code","source":["plt.figure(figsize=(14,7))\n","plt.bar(fifth_freq.index, fifth_freq.values, tick_label = fifth_freq.index)\n","plt.title(\"Frequency of Fifth Number\")\n","plt.xlabel(\"Number Drawn\")\n","plt.ylabel(\"Frequency\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":778},"id":"UKWXmgqIHR3e","executionInfo":{"status":"ok","timestamp":1735219068138,"user_tz":300,"elapsed":1017,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"a3176db9-7f18-4df0-a3ca-e7787560c512"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":26},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Sixth"],"metadata":{"id":"X3gwjAQOHc0o"}},{"cell_type":"code","source":["plt.figure(figsize=(14,7))\n","plt.bar(sixth_freq.index, sixth_freq.values, tick_label = sixth_freq.index)\n","plt.title(\"Frequency of Sixth Number\")\n","plt.xlabel(\"Number Drawn\")\n","plt.ylabel(\"Frequency\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":778},"id":"OzKeud_IHe2r","executionInfo":{"status":"ok","timestamp":1735219119564,"user_tz":300,"elapsed":1295,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"4a90506d-b357-41c2-d2b9-affa6d60a195"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":27},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize=(14,7))\n","plt.bar(seventh_freq.index, seventh_freq.values, tick_label = seventh_freq.index)\n","plt.title(\"Frequency of Seventh Number\")\n","plt.xlabel(\"Number Drawn\")\n","plt.ylabel(\"Frequency\")\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":778},"id":"3HOx0_xnHp1H","executionInfo":{"status":"ok","timestamp":1735219216252,"user_tz":300,"elapsed":809,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"1404abe6-4af0-4576-c78c-a8401de6f857"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":28},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Bonus"],"metadata":{"id":"TRaTHZ_EIBL_"}},{"cell_type":"code","source":["plt.figure(figsize=(14,7))\n","plt.bar(bonus_freq.index, bonus_freq.values, tick_label = bonus_freq.index)\n","plt.title(\"Frequency of bonus Number\")\n","plt.xlabel(\"Number Drawn\")\n","plt.ylabel(\"Frequency\")\n","plt.show\n","# I think 0 here means the dataset is faulty, i wont do calulations on bonus"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":623},"id":"-WOxs3uzIC2y","executionInfo":{"status":"ok","timestamp":1735219295262,"user_tz":300,"elapsed":782,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"4eb21e4e-6b74-46f5-bc7f-a84a40e1b758"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 482);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":29},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#preparing for modelling"],"metadata":{"id":"l0L6BA26NjDp"}},{"cell_type":"code","source":["df1 = pd.DataFrame(df)\n","df1.drop(columns = ['DRAW NUMBER', 'SEQUENCE NUMBER', 'PRODUCT', 'DRAW DATE', 'BONUS NUMBER'], inplace=True)\n","seq = pd.DataFrame({'combined_column': df1.apply(lambda row: ', '.join(map(str, row)), axis=1)})\n","print(seq)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2DQcfXYZNnMt","executionInfo":{"status":"ok","timestamp":1735223344502,"user_tz":300,"elapsed":199,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"bcbc7a1b-5bfc-46d0-a5ff-d1a4d2690378"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["                combined_column\n","0     5, 17, 19, 25, 31, 38, 46\n","1     8, 27, 28, 29, 31, 32, 35\n","2     5, 15, 25, 38, 42, 46, 47\n","3     4, 10, 18, 20, 31, 35, 44\n","4      4, 7, 10, 12, 23, 25, 36\n","...                         ...\n","2745     1, 2, 5, 8, 18, 23, 46\n","2746    2, 6, 9, 11, 12, 24, 40\n","2747  5, 25, 28, 34, 40, 46, 47\n","2748   5, 7, 13, 16, 25, 26, 37\n","2749  3, 12, 15, 17, 32, 35, 43\n","\n","[2750 rows x 1 columns]\n"]}]},{"cell_type":"markdown","source":["copy of CPT model from Neeraj Sarwan"],"metadata":{"id":"GBwcr3B7R2ds"}},{"cell_type":"code","source":["class PredictionTree():\n","    Item = None\n","    Parent = None\n","    Children = None\n","\n","    def __init__(self,itemValue=None):\n","        self.Item = itemValue\n","        self.Children = []\n","        self.Parent = None\n","\n","    def addChild(self, child):\n","        newchild = PredictionTree(child)\n","        newchild.Parent = self\n","        self.Children.append(newchild)\n","\n","    def getChild(self,target):\n","        for chld in self.Children:\n","            if chld.Item == target:\n","                return chld\n","        return None\n","\n","    def getChildren(self):\n","        return self.Children\n","\n","    def hasChild(self,target):\n","        found = self.getChild(target)\n","        if found is not None:\n","            return True\n","        else:\n","            return False\n","\n","    def removeChild(self,child):\n","        for chld in self.Children:\n","            if chld.Item==child:\n","                self.Children.remove(chld)"],"metadata":{"id":"c7AMtsdpSf7y","executionInfo":{"status":"ok","timestamp":1735221973278,"user_tz":300,"elapsed":660,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["\n","import pandas as pd\n","from tqdm import tqdm\n","\n","\n","class CPT():\n","\n","    alphabet = None # A set of all unique items in the entire data file\n","    root = None # Root node of the Prediction Tree\n","    II = None #Inverted Index dictionary, where key : unique item, value : set of sequences containing this item\n","    LT = None # A Lookup table dictionary, where key : id of a sequence(row), value: leaf node of a Prediction Tree\n","\n","    def __init__(self):\n","        self.alphabet = set()\n","        self.root = PredictionTree()\n","        self.II = {}\n","        self.LT = {}\n","\n","    def load_files(self,train_file,test_file = None):\n","\n","        \"\"\"\n","        This function reads in the wide csv file of sequences separated by commas and returns a list of list of those\n","        sequences. The sequences are defined as below.\n","\n","        seq1 = A,B,C,D\n","        seq2  B,C,E\n","\n","        Returns: [[A,B,C,D],[B,C,E]]\n","\n","\n","        \"\"\"\n","\n","        data = [] # List of list containing the entire sequence data using which the model will be trained.\n","        target = [] # List of list containing the test sequences whose next n items are to be predicted\n","\n","        if train_file is None:\n","            return train_file\n","\n","        train = pd.read_csv(train_file)\n","\n","        for index, row in train.iterrows():\n","            data.append(row.values)\n","\n","        if test_file is not None:\n","\n","            test = pd.read_csv(test_file)\n","\n","            for index, row in test.iterrows():\n","                data.append(row.values)\n","                target.append(list(row.values))\n","\n","            return data, target\n","\n","        return data\n","\n","\n","\n","    # In[3]:\n","\n","\n","    def train(self, data):\n","\n","        \"\"\"\n","        This functions populates the Prediction Tree, Inverted Index and LookUp Table for the algorithm.\n","\n","        Input: The list of list training data\n","        Output : Boolean True\n","\n","        \"\"\"\n","\n","        cursornode = self.root\n","\n","\n","        for seqid,row in enumerate(data):\n","            for element in row:\n","\n","                # adding to the Prediction Tree\n","\n","                if cursornode.hasChild(element)== False:\n","                    cursornode.addChild(element)\n","                    cursornode = cursornode.getChild(element)\n","\n","                else:\n","                    cursornode = cursornode.getChild(element)\n","\n","                # Adding to the Inverted Index\n","\n","                if self.II.get(element) is None:\n","                    self.II[element] = set()\n","\n","                self.II[element].add(seqid)\n","\n","                self.alphabet.add(element)\n","\n","            self.LT[seqid] = cursornode\n","\n","            cursornode = self.root\n","\n","        return True\n","\n","\n","    def score(self, counttable,key, length, target_size, number_of_similar_sequences, number_items_counttable):\n","\n","\n","        \"\"\"\n","        This function is the main workhorse and calculates the score to be populated against an item. Items are predicted\n","        using this score.\n","\n","        Output: Returns a counttable dictionary which stores the score against items. This counttable is specific for a\n","        particular row or a sequence and therefore re-calculated at each prediction.\n","\n","\n","        \"\"\"\n","\n","\n","\n","        weight_level = 1/number_of_similar_sequences\n","        weight_distance = 1/number_items_counttable\n","        score = 1 + weight_level + weight_distance* 0.001\n","\n","        if counttable.get(key) is None:\n","            counttable[key] = score\n","        else:\n","            counttable[key] = score * counttable.get(key)\n","\n","        return counttable\n","\n","\n","\n","    def predict(self,data,target,k, n=1):\n","        \"\"\"\n","        Here target is the test dataset in the form of list of list,\n","        k is the number of last elements that will be used to find similar sequences and,\n","        n is the number of predictions required.\n","\n","        Input: training list of list, target list of list, k,n\n","\n","        Output: max n predictions for each sequence\n","        \"\"\"\n","\n","        predictions = []\n","\n","        for each_target in tqdm(target):\n","            each_target = each_target[-k:]\n","\n","            intersection = set(range(0,len(data)))\n","\n","            for element in each_target:\n","                if self.II.get(element) is None:\n","                    continue\n","                intersection = intersection & self.II.get(element)\n","\n","            similar_sequences = []\n","\n","            for element in intersection:\n","                currentnode = self.LT.get(element)\n","                tmp = []\n","                while currentnode.Item is not None:\n","                    tmp.append(currentnode.Item)\n","                    currentnode = currentnode.Parent\n","                similar_sequences.append(tmp)\n","\n","            for sequence in similar_sequences:\n","                sequence.reverse()\n","\n","            counttable = {}\n","\n","            for  sequence in similar_sequences:\n","                try:\n","                    index = next(i for i,v in zip(range(len(sequence)-1, 0, -1), reversed(sequence)) if v == each_target[-1])\n","                except:\n","                    index = None\n","                if index is not None:\n","                    count = 1\n","                    for element in sequence[index+1:]:\n","                        if element in each_target:\n","                            continue\n","\n","                        counttable = self.score(counttable,element,len(each_target),len(each_target),len(similar_sequences),count)\n","                        count+=1\n","\n","\n","            pred = self.get_n_largest(counttable,n)\n","            predictions.append(pred)\n","\n","        return predictions\n","\n","\n","\n","    def get_n_largest(self,dictionary,n):\n","\n","\n","        \"\"\"\n","        A small utility to obtain top n keys of a Dictionary based on their values.\n","\n","        \"\"\"\n","        largest = sorted(dictionary.items(), key = lambda t: t[1], reverse=True)[:n]\n","        return [key for key,_ in largest]\n","\n"],"metadata":{"id":"qqE2d0TvR6ul","executionInfo":{"status":"ok","timestamp":1735221990812,"user_tz":300,"elapsed":173,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["#split into testing and training\n","#iloc isnt working\n","test = seq.iloc[:,:1200]\n","train = seq.iloc[:,:1550]\n","print(test)\n","test.to_csv(\"test.csv\")\n","train.to_csv(\"train.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aaiacQRgSvmx","executionInfo":{"status":"ok","timestamp":1735223371668,"user_tz":300,"elapsed":767,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"6d384fe7-ec77-4064-f4c8-d9a7b45299d6"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["                combined_column\n","0     5, 17, 19, 25, 31, 38, 46\n","1     8, 27, 28, 29, 31, 32, 35\n","2     5, 15, 25, 38, 42, 46, 47\n","3     4, 10, 18, 20, 31, 35, 44\n","4      4, 7, 10, 12, 23, 25, 36\n","...                         ...\n","2745     1, 2, 5, 8, 18, 23, 46\n","2746    2, 6, 9, 11, 12, 24, 40\n","2747  5, 25, 28, 34, 40, 46, 47\n","2748   5, 7, 13, 16, 25, 26, 37\n","2749  3, 12, 15, 17, 32, 35, 43\n","\n","[2750 rows x 1 columns]\n"]}]},{"cell_type":"code","source":["model = CPT()\n","data,target = model.load_files(\"/content/test.csv\", \"/content/train.csv\")\n","\n","model.train(data)\n","predictions = model.predict(data,target,1,10)\n","#wtf values do i put for k and n..."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8vH_nkXYSqq-","executionInfo":{"status":"ok","timestamp":1735224585522,"user_tz":300,"elapsed":3940,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"9243ceb8-cdd4-4f2f-f774-47f59337042e"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 2750/2750 [00:00<00:00, 2765.66it/s]\n"]}]},{"cell_type":"code","source":["df2 = pd.DataFrame(predictions)\n","df2.head()\n","#empty df :("],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":189},"id":"2bJdLWB8UowM","executionInfo":{"status":"ok","timestamp":1735224587749,"user_tz":300,"elapsed":193,"user":{"displayName":"Aysha G","userId":"00846824544212099749"}},"outputId":"44c02b40-88ce-4418-b7fd-644270287d60"},"execution_count":107,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: []\n","Index: [0, 1, 2, 3, 4]"],"text/html":["\n","  <div id=\"df-cbf8b261-3efc-4e17-8c23-72b6b11d4640\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbf8b261-3efc-4e17-8c23-72b6b11d4640')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-cbf8b261-3efc-4e17-8c23-72b6b11d4640 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-cbf8b261-3efc-4e17-8c23-72b6b11d4640');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6cbc695c-d053-45b1-9188-9ab615fd6e70\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6cbc695c-d053-45b1-9188-9ab615fd6e70')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6cbc695c-d053-45b1-9188-9ab615fd6e70 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df2","summary":"{\n  \"name\": \"df2\",\n  \"rows\": 2750,\n  \"fields\": []\n}"}},"metadata":{},"execution_count":107}]}]}