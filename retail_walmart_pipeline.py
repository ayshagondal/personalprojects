# -*- coding: utf-8 -*-
"""Retail_Walmart_Pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1enBlqMoG5PXSZNNZstTwbohIhBxsGzCZ
"""

#SQL Query in PostGRESQL database
#SELECT * FROM grocery_sales

import pandas as pd
import os

# Function to extract data from a parquet file and perform operations
def extract(stored, extra):
    # Read the parquet file into a DataFrame
    extra_df = pd.read_parquet(extra)
    # Merge the stored DataFrame with the extra DataFrame on the "index" column
    merged_df = stored.merge(extra_df, on="index")
    # Return the merged DataFrame
    return merged_df

# Assuming grocery_sales is defined somewhere in the notebook
merged_df = extract(grocery_sales, "extra_data.parquet")

# Function to transform the data
def transform(data):
    # Fill missing values with 0
    data.fillna(0, inplace=True)
    # Ensure that the 'Date' column is of string type before converting to datetime
    data["Date"] = data["Date"].astype(str)
    # Convert 'Date' column to datetime format
    data["Date"] = pd.to_datetime(data["Date"], format="%Y-%m-%d", errors='coerce')
    # Extract the month from the 'Date' column
    data["Month"] = data["Date"].dt.month
    # Filter rows where 'Weekly_Sales' is greater than 10000
    data = data.loc[data["Weekly_Sales"] > 10000, :]
    # Drop unnecessary columns
    data = data.drop(["index", "Temperature", "Fuel_Price", "MarkDown1", "MarkDown2",
                      "MarkDown3", "MarkDown4", "MarkDown5", "Type", "Size", "Date"], axis=1)
    print(data)
    return data

# Transform the merged data
clean_data = transform(merged_df)

# Function to calculate average monthly sales
def avg_monthly_sales(clean_data):
    # Select 'Month' and 'Weekly_Sales' columns
    avg_sales = clean_data[["Month", "Weekly_Sales"]]
    # Group by 'Month' and calculate the mean of 'Weekly_Sales'
    avg_sales = (avg_sales.groupby("Month").agg(Avg_Sales=("Weekly_Sales","mean"))
                 .reset_index().round(2))
    print(avg_sales)
    return avg_sales

# Calculate average monthly sales
agg_data = avg_monthly_sales(clean_data)

# Function to load data into CSV files
def load(cleaned, cleaned_path, agg_data, agg_data_path):
    # Save the cleaned data to a CSV file
    cleaned.to_csv(cleaned_path, index=False)
    # Save the aggregated data to a CSV file
    agg_data.to_csv(agg_data_path, index=False)

# Load the cleaned and aggregated data into CSV files
load(clean_data, "clean_data.csv", agg_data, "agg_data.csv")

# Function to validate the existence of a file
def validation(file_path):
    # Check if the file exists
    file_exists = os.path.exists(file_path)
    # Raise an exception if the file does not exist
    if not file_exists:
        raise Exception(f"There is no file at path {file_path}")

# Validate the existence of the CSV files
validation("clean_data.csv")
validation("agg_data.csv")